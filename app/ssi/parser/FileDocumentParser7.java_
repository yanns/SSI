package ssi.parser;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousFileChannel;
import java.nio.channels.CompletionHandler;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;


public class FileDocumentParser7 {

    public static Document parseFile(URI file) throws IOException {
        return parseFile(new File(file));
    }

    public static Document parseFile(File file) throws IOException {
        InputStream in = null;
        try {
            in = new FileInputStream(file);
            long length = file.length();
            return parseFile(in, length > 2048 ? 2048 : (int)length);
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }

    public static Document parseFile(InputStream in, int capacity) throws IOException {
        DocumentParser documentParser = new DocumentParser(new DocumentParser.Builder().setPlainBufferCapacity(capacity));
        byte[] bytes = new byte[2048];
        while (in.read(bytes) != -1) {
            // TODO avoid char array copy
            String input = new String(bytes, "UTF-8");
            documentParser.parse(input);
        }
        return documentParser.finish();
    }

    public static Document parseFile7(URI file) throws IOException {
        final DocumentParser documentParser = new DocumentParser(new DocumentParser.Builder().setPlainBufferCapacity(2048));
        final AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(Paths.get(file), StandardOpenOption.READ);
        // see http://javanio.info/filearea/bookexamples/unpacked/com/

//        final ByteBuffer buffer = ByteBuffer.allocate(2048);
//        final Thread current = Thread.currentThread ();
//        final long[] position = new long[1];
//        position[0] = 0;
//        fileChannel.read(buffer, position[0], buffer, new CompletionHandler<Integer, ByteBuffer>() {
//
//            @Override
//            public void completed(Integer result, ByteBuffer attachment) {
//                if (result < 0) {
//                    current.interrupt ();
//                    return;
//                }
//                position[0] += result;
//                if (attachment.hasRemaining()) {
//                    fileChannel.read(buffer, position[0], buffer, this);
//                } else {
//                    buffer.flip();
//                    try {
//                        String input = new String(attachment.array(), "UTF-8");
//                        documentParser.parse(input);
//                    } catch (UnsupportedEncodingException e) {
//                        e.printStackTrace();
//                    }
//                    buffer.clear();
//                    fileChannel.read(buffer, position[0], buffer, this);
//                }
//            }
//
//            @Override
//            public void failed(Throwable exc, ByteBuffer attachment) {
//                current.interrupt();
//                exc.printStackTrace();
//            }
//
//        });
//        try {
//            current.join();
//        } catch (InterruptedException expected) {
//        }

        final ByteBuffer buffer = ByteBuffer.allocate(2048);
        String inputRead = null;
        boolean odd = true;
        long position = 0;
        int read = 0;
        do {
//            System.out.print("\nreading at position: " + position);
            buffer.clear();
            Future<Integer> result = fileChannel.read(buffer, position);
            if (read > 0) {
                documentParser.parse(inputRead);
            }
            odd = !odd;
            try {
                read = result.get();
                inputRead = new String(buffer.array(), "UTF-8");
                position += read;
//                System.out.print("\nread: " + read);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        } while (read > 0);


        fileChannel.close();
        return documentParser.finish();
    }


}
